// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/systemaccounting/mxfactorial/pkg/aws/lambda (interfaces: IAWSLambda,ILambdaService)

// Package mock_lambda is a generated GoMock package.
package mock_lambda

import (
	reflect "reflect"

	lambda "github.com/aws/aws-sdk-go/service/lambda"
	gomock "github.com/golang/mock/gomock"
)

// MockIAWSLambda is a mock of IAWSLambda interface.
type MockIAWSLambda struct {
	ctrl     *gomock.Controller
	recorder *MockIAWSLambdaMockRecorder
}

// MockIAWSLambdaMockRecorder is the mock recorder for MockIAWSLambda.
type MockIAWSLambdaMockRecorder struct {
	mock *MockIAWSLambda
}

// NewMockIAWSLambda creates a new mock instance.
func NewMockIAWSLambda(ctrl *gomock.Controller) *MockIAWSLambda {
	mock := &MockIAWSLambda{ctrl: ctrl}
	mock.recorder = &MockIAWSLambdaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAWSLambda) EXPECT() *MockIAWSLambdaMockRecorder {
	return m.recorder
}

// CreateInvokeInput mocks base method.
func (m *MockIAWSLambda) CreateInvokeInput(arg0 []byte) *lambda.InvokeInput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvokeInput", arg0)
	ret0, _ := ret[0].(*lambda.InvokeInput)
	return ret0
}

// CreateInvokeInput indicates an expected call of CreateInvokeInput.
func (mr *MockIAWSLambdaMockRecorder) CreateInvokeInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvokeInput", reflect.TypeOf((*MockIAWSLambda)(nil).CreateInvokeInput), arg0)
}

// Invoke mocks base method.
func (m *MockIAWSLambda) Invoke(arg0 *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].(*lambda.InvokeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockIAWSLambdaMockRecorder) Invoke(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockIAWSLambda)(nil).Invoke), arg0)
}

// Marshal mocks base method.
func (m *MockIAWSLambda) Marshal(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockIAWSLambdaMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockIAWSLambda)(nil).Marshal), arg0)
}

// MockILambdaService is a mock of ILambdaService interface.
type MockILambdaService struct {
	ctrl     *gomock.Controller
	recorder *MockILambdaServiceMockRecorder
}

// MockILambdaServiceMockRecorder is the mock recorder for MockILambdaService.
type MockILambdaServiceMockRecorder struct {
	mock *MockILambdaService
}

// NewMockILambdaService creates a new mock instance.
func NewMockILambdaService(ctrl *gomock.Controller) *MockILambdaService {
	mock := &MockILambdaService{ctrl: ctrl}
	mock.recorder = &MockILambdaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILambdaService) EXPECT() *MockILambdaServiceMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockILambdaService) Invoke(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invoke indicates an expected call of Invoke.
func (mr *MockILambdaServiceMockRecorder) Invoke(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockILambdaService)(nil).Invoke), arg0)
}
