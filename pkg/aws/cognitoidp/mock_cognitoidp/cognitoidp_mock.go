// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/systemaccounting/mxfactorial/pkg/aws/cognitoidp (interfaces: IJwtDeps,IGetClaimedKeyID,IIdpDeps,IJwToken)

// Package mock_cognitoidp is a generated GoMock package.
package mock_cognitoidp

import (
	rsa "crypto/rsa"
	io "io"
	http "net/http"
	reflect "reflect"

	jwt "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
	cognitoidp "github.com/systemaccounting/mxfactorial/pkg/aws/cognitoidp"
)

// MockIJwtDeps is a mock of IJwtDeps interface.
type MockIJwtDeps struct {
	ctrl     *gomock.Controller
	recorder *MockIJwtDepsMockRecorder
}

// MockIJwtDepsMockRecorder is the mock recorder for MockIJwtDeps.
type MockIJwtDepsMockRecorder struct {
	mock *MockIJwtDeps
}

// NewMockIJwtDeps creates a new mock instance.
func NewMockIJwtDeps(ctrl *gomock.Controller) *MockIJwtDeps {
	mock := &MockIJwtDeps{ctrl: ctrl}
	mock.recorder = &MockIJwtDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwtDeps) EXPECT() *MockIJwtDepsMockRecorder {
	return m.recorder
}

// DecodeSegment mocks base method.
func (m *MockIJwtDeps) DecodeSegment(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeSegment", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeSegment indicates an expected call of DecodeSegment.
func (mr *MockIJwtDepsMockRecorder) DecodeSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeSegment", reflect.TypeOf((*MockIJwtDeps)(nil).DecodeSegment), arg0)
}

// GetCognitoClaims mocks base method.
func (m *MockIJwtDeps) GetCognitoClaims(arg0 *jwt.Token) (cognitoidp.CognitoClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCognitoClaims", arg0)
	ret0, _ := ret[0].(cognitoidp.CognitoClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCognitoClaims indicates an expected call of GetCognitoClaims.
func (mr *MockIJwtDepsMockRecorder) GetCognitoClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCognitoClaims", reflect.TypeOf((*MockIJwtDeps)(nil).GetCognitoClaims), arg0)
}

// ParseHeader mocks base method.
func (m *MockIJwtDeps) ParseHeader(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseHeader", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ParseHeader indicates an expected call of ParseHeader.
func (mr *MockIJwtDepsMockRecorder) ParseHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseHeader", reflect.TypeOf((*MockIJwtDeps)(nil).ParseHeader), arg0)
}

// TestToken mocks base method.
func (m *MockIJwtDeps) TestToken(arg0 string, arg1 *rsa.PublicKey) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestToken", arg0, arg1)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestToken indicates an expected call of TestToken.
func (mr *MockIJwtDepsMockRecorder) TestToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestToken", reflect.TypeOf((*MockIJwtDeps)(nil).TestToken), arg0, arg1)
}

// Unmarshal mocks base method.
func (m *MockIJwtDeps) Unmarshal(arg0 []byte, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockIJwtDepsMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockIJwtDeps)(nil).Unmarshal), arg0, arg1)
}

// MockIGetClaimedKeyID is a mock of IGetClaimedKeyID interface.
type MockIGetClaimedKeyID struct {
	ctrl     *gomock.Controller
	recorder *MockIGetClaimedKeyIDMockRecorder
}

// MockIGetClaimedKeyIDMockRecorder is the mock recorder for MockIGetClaimedKeyID.
type MockIGetClaimedKeyIDMockRecorder struct {
	mock *MockIGetClaimedKeyID
}

// NewMockIGetClaimedKeyID creates a new mock instance.
func NewMockIGetClaimedKeyID(ctrl *gomock.Controller) *MockIGetClaimedKeyID {
	mock := &MockIGetClaimedKeyID{ctrl: ctrl}
	mock.recorder = &MockIGetClaimedKeyIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetClaimedKeyID) EXPECT() *MockIGetClaimedKeyIDMockRecorder {
	return m.recorder
}

// GetClaimedKeyID mocks base method.
func (m *MockIGetClaimedKeyID) GetClaimedKeyID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimedKeyID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimedKeyID indicates an expected call of GetClaimedKeyID.
func (mr *MockIGetClaimedKeyIDMockRecorder) GetClaimedKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimedKeyID", reflect.TypeOf((*MockIGetClaimedKeyID)(nil).GetClaimedKeyID))
}

// MockIIdpDeps is a mock of IIdpDeps interface.
type MockIIdpDeps struct {
	ctrl     *gomock.Controller
	recorder *MockIIdpDepsMockRecorder
}

// MockIIdpDepsMockRecorder is the mock recorder for MockIIdpDeps.
type MockIIdpDepsMockRecorder struct {
	mock *MockIIdpDeps
}

// NewMockIIdpDeps creates a new mock instance.
func NewMockIIdpDeps(ctrl *gomock.Controller) *MockIIdpDeps {
	mock := &MockIIdpDeps{ctrl: ctrl}
	mock.recorder = &MockIIdpDepsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIIdpDeps) EXPECT() *MockIIdpDepsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIIdpDeps) Get(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIIdpDepsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIIdpDeps)(nil).Get), arg0)
}

// Marshal mocks base method.
func (m *MockIIdpDeps) Marshal(arg0 interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockIIdpDepsMockRecorder) Marshal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockIIdpDeps)(nil).Marshal), arg0)
}

// ParseRawKey mocks base method.
func (m *MockIIdpDeps) ParseRawKey(arg0 []byte) (*rsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRawKey", arg0)
	ret0, _ := ret[0].(*rsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRawKey indicates an expected call of ParseRawKey.
func (mr *MockIIdpDepsMockRecorder) ParseRawKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRawKey", reflect.TypeOf((*MockIIdpDeps)(nil).ParseRawKey), arg0)
}

// ReadAll mocks base method.
func (m *MockIIdpDeps) ReadAll(arg0 io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockIIdpDepsMockRecorder) ReadAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockIIdpDeps)(nil).ReadAll), arg0)
}

// Unmarshal mocks base method.
func (m *MockIIdpDeps) Unmarshal(arg0 []byte, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockIIdpDepsMockRecorder) Unmarshal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockIIdpDeps)(nil).Unmarshal), arg0, arg1)
}

// MockIJwToken is a mock of IJwToken interface.
type MockIJwToken struct {
	ctrl     *gomock.Controller
	recorder *MockIJwTokenMockRecorder
}

// MockIJwTokenMockRecorder is the mock recorder for MockIJwToken.
type MockIJwTokenMockRecorder struct {
	mock *MockIJwToken
}

// NewMockIJwToken creates a new mock instance.
func NewMockIJwToken(ctrl *gomock.Controller) *MockIJwToken {
	mock := &MockIJwToken{ctrl: ctrl}
	mock.recorder = &MockIJwTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJwToken) EXPECT() *MockIJwTokenMockRecorder {
	return m.recorder
}

// GetClaimedKeyID mocks base method.
func (m *MockIJwToken) GetClaimedKeyID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaimedKeyID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaimedKeyID indicates an expected call of GetClaimedKeyID.
func (mr *MockIJwTokenMockRecorder) GetClaimedKeyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaimedKeyID", reflect.TypeOf((*MockIJwToken)(nil).GetClaimedKeyID))
}

// GetCognitoClaims mocks base method.
func (m *MockIJwToken) GetCognitoClaims(arg0 *jwt.Token) (cognitoidp.CognitoClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCognitoClaims", arg0)
	ret0, _ := ret[0].(cognitoidp.CognitoClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCognitoClaims indicates an expected call of GetCognitoClaims.
func (mr *MockIJwTokenMockRecorder) GetCognitoClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCognitoClaims", reflect.TypeOf((*MockIJwToken)(nil).GetCognitoClaims), arg0)
}

// TestToken mocks base method.
func (m *MockIJwToken) TestToken(arg0 *rsa.PublicKey) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestToken", arg0)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestToken indicates an expected call of TestToken.
func (mr *MockIJwTokenMockRecorder) TestToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestToken", reflect.TypeOf((*MockIJwToken)(nil).TestToken), arg0)
}
