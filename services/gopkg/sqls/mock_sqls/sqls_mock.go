// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/systemaccounting/mxfactorial/services/gopkg/sqls (interfaces: InsertSQLBuilder,UpdateSQLBuilder,SelectSQLBuilder,DeleteSQLBuilder)

// Package mock_sqls is a generated GoMock package.
package mock_sqls

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlbuilder "github.com/huandu/go-sqlbuilder"
	decimal "github.com/shopspring/decimal"
	sqls "github.com/systemaccounting/mxfactorial/services/gopkg/sqls"
	types "github.com/systemaccounting/mxfactorial/services/gopkg/types"
)

// MockInsertSQLBuilder is a mock of InsertSQLBuilder interface.
type MockInsertSQLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockInsertSQLBuilderMockRecorder
}

// MockInsertSQLBuilderMockRecorder is the mock recorder for MockInsertSQLBuilder.
type MockInsertSQLBuilderMockRecorder struct {
	mock *MockInsertSQLBuilder
}

// NewMockInsertSQLBuilder creates a new mock instance.
func NewMockInsertSQLBuilder(ctrl *gomock.Controller) *MockInsertSQLBuilder {
	mock := &MockInsertSQLBuilder{ctrl: ctrl}
	mock.recorder = &MockInsertSQLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertSQLBuilder) EXPECT() *MockInsertSQLBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockInsertSQLBuilder) Build() (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockInsertSQLBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockInsertSQLBuilder)(nil).Build))
}

// BuildWithFlavor mocks base method.
func (m *MockInsertSQLBuilder) BuildWithFlavor(arg0 sqlbuilder.Flavor, arg1 ...interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildWithFlavor", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// BuildWithFlavor indicates an expected call of BuildWithFlavor.
func (mr *MockInsertSQLBuilderMockRecorder) BuildWithFlavor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWithFlavor", reflect.TypeOf((*MockInsertSQLBuilder)(nil).BuildWithFlavor), varargs...)
}

// InsertAccountBalanceSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertAccountBalanceSQL(arg0 string, arg1 decimal.Decimal, arg2 types.ID) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountBalanceSQL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertAccountBalanceSQL indicates an expected call of InsertAccountBalanceSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertAccountBalanceSQL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountBalanceSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertAccountBalanceSQL), arg0, arg1, arg2)
}

// InsertAccountProfileSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertAccountProfileSQL(arg0 *types.AccountProfile) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountProfileSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertAccountProfileSQL indicates an expected call of InsertAccountProfileSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertAccountProfileSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountProfileSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertAccountProfileSQL), arg0)
}

// InsertAccountSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertAccountSQL(arg0 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAccountSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertAccountSQL indicates an expected call of InsertAccountSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertAccountSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAccountSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertAccountSQL), arg0)
}

// InsertApprovalsSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertApprovalsSQL(arg0 func() sqls.SelectSQLBuilder, arg1 string, arg2 []*types.Approval) sqlbuilder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertApprovalsSQL", arg0, arg1, arg2)
	ret0, _ := ret[0].(sqlbuilder.Builder)
	return ret0
}

// InsertApprovalsSQL indicates an expected call of InsertApprovalsSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertApprovalsSQL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertApprovalsSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertApprovalsSQL), arg0, arg1, arg2)
}

// InsertRuleInstanceSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertRuleInstanceSQL(arg0, arg1, arg2, arg3, arg4, arg5 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRuleInstanceSQL", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertRuleInstanceSQL indicates an expected call of InsertRuleInstanceSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertRuleInstanceSQL(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRuleInstanceSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertRuleInstanceSQL), arg0, arg1, arg2, arg3, arg4, arg5)
}

// InsertTrItemSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertTrItemSQL(arg0 func() sqls.SelectSQLBuilder, arg1 *types.TransactionItem) sqlbuilder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTrItemSQL", arg0, arg1)
	ret0, _ := ret[0].(sqlbuilder.Builder)
	return ret0
}

// InsertTrItemSQL indicates an expected call of InsertTrItemSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertTrItemSQL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTrItemSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertTrItemSQL), arg0, arg1)
}

// InsertTransactionNotificationSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertTransactionNotificationSQL(arg0 []*types.TransactionNotification) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionNotificationSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertTransactionNotificationSQL indicates an expected call of InsertTransactionNotificationSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertTransactionNotificationSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionNotificationSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertTransactionNotificationSQL), arg0)
}

// InsertTransactionSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertTransactionSQL(arg0 *types.ID, arg1, arg2, arg3 *string, arg4 types.Role, arg5, arg6 *string) sqlbuilder.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionSQL", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(sqlbuilder.Builder)
	return ret0
}

// InsertTransactionSQL indicates an expected call of InsertTransactionSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertTransactionSQL(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertTransactionSQL), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// InsertWebsocketConnectionSQL mocks base method.
func (m *MockInsertSQLBuilder) InsertWebsocketConnectionSQL(arg0 string, arg1 int64) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWebsocketConnectionSQL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// InsertWebsocketConnectionSQL indicates an expected call of InsertWebsocketConnectionSQL.
func (mr *MockInsertSQLBuilderMockRecorder) InsertWebsocketConnectionSQL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWebsocketConnectionSQL", reflect.TypeOf((*MockInsertSQLBuilder)(nil).InsertWebsocketConnectionSQL), arg0, arg1)
}

// MockUpdateSQLBuilder is a mock of UpdateSQLBuilder interface.
type MockUpdateSQLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateSQLBuilderMockRecorder
}

// MockUpdateSQLBuilderMockRecorder is the mock recorder for MockUpdateSQLBuilder.
type MockUpdateSQLBuilderMockRecorder struct {
	mock *MockUpdateSQLBuilder
}

// NewMockUpdateSQLBuilder creates a new mock instance.
func NewMockUpdateSQLBuilder(ctrl *gomock.Controller) *MockUpdateSQLBuilder {
	mock := &MockUpdateSQLBuilder{ctrl: ctrl}
	mock.recorder = &MockUpdateSQLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateSQLBuilder) EXPECT() *MockUpdateSQLBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockUpdateSQLBuilder) Build() (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockUpdateSQLBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).Build))
}

// BuildWithFlavor mocks base method.
func (m *MockUpdateSQLBuilder) BuildWithFlavor(arg0 sqlbuilder.Flavor, arg1 ...interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildWithFlavor", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// BuildWithFlavor indicates an expected call of BuildWithFlavor.
func (mr *MockUpdateSQLBuilderMockRecorder) BuildWithFlavor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWithFlavor", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).BuildWithFlavor), varargs...)
}

// UpdateCreditorAccountBalanceSQL mocks base method.
func (m *MockUpdateSQLBuilder) UpdateCreditorAccountBalanceSQL(arg0 *types.TransactionItem) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreditorAccountBalanceSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// UpdateCreditorAccountBalanceSQL indicates an expected call of UpdateCreditorAccountBalanceSQL.
func (mr *MockUpdateSQLBuilderMockRecorder) UpdateCreditorAccountBalanceSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreditorAccountBalanceSQL", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).UpdateCreditorAccountBalanceSQL), arg0)
}

// UpdateDebitorAccountBalanceSQL mocks base method.
func (m *MockUpdateSQLBuilder) UpdateDebitorAccountBalanceSQL(arg0 *types.TransactionItem) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDebitorAccountBalanceSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// UpdateDebitorAccountBalanceSQL indicates an expected call of UpdateDebitorAccountBalanceSQL.
func (mr *MockUpdateSQLBuilderMockRecorder) UpdateDebitorAccountBalanceSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDebitorAccountBalanceSQL", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).UpdateDebitorAccountBalanceSQL), arg0)
}

// UpdateTransactionByIDSQL mocks base method.
func (m *MockUpdateSQLBuilder) UpdateTransactionByIDSQL(arg0 *types.ID, arg1 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByIDSQL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// UpdateTransactionByIDSQL indicates an expected call of UpdateTransactionByIDSQL.
func (mr *MockUpdateSQLBuilderMockRecorder) UpdateTransactionByIDSQL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByIDSQL", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).UpdateTransactionByIDSQL), arg0, arg1)
}

// UpdateWebsocketByConnIDSQL mocks base method.
func (m *MockUpdateSQLBuilder) UpdateWebsocketByConnIDSQL(arg0, arg1 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebsocketByConnIDSQL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// UpdateWebsocketByConnIDSQL indicates an expected call of UpdateWebsocketByConnIDSQL.
func (mr *MockUpdateSQLBuilderMockRecorder) UpdateWebsocketByConnIDSQL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebsocketByConnIDSQL", reflect.TypeOf((*MockUpdateSQLBuilder)(nil).UpdateWebsocketByConnIDSQL), arg0, arg1)
}

// MockSelectSQLBuilder is a mock of SelectSQLBuilder interface.
type MockSelectSQLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockSelectSQLBuilderMockRecorder
}

// MockSelectSQLBuilderMockRecorder is the mock recorder for MockSelectSQLBuilder.
type MockSelectSQLBuilderMockRecorder struct {
	mock *MockSelectSQLBuilder
}

// NewMockSelectSQLBuilder creates a new mock instance.
func NewMockSelectSQLBuilder(ctrl *gomock.Controller) *MockSelectSQLBuilder {
	mock := &MockSelectSQLBuilder{ctrl: ctrl}
	mock.recorder = &MockSelectSQLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectSQLBuilder) EXPECT() *MockSelectSQLBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockSelectSQLBuilder) Build() (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockSelectSQLBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockSelectSQLBuilder)(nil).Build))
}

// BuildWithFlavor mocks base method.
func (m *MockSelectSQLBuilder) BuildWithFlavor(arg0 sqlbuilder.Flavor, arg1 ...interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildWithFlavor", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// BuildWithFlavor indicates an expected call of BuildWithFlavor.
func (mr *MockSelectSQLBuilderMockRecorder) BuildWithFlavor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWithFlavor", reflect.TypeOf((*MockSelectSQLBuilder)(nil).BuildWithFlavor), varargs...)
}

// From mocks base method.
func (m *MockSelectSQLBuilder) From(arg0 ...string) sqlbuilder.Builder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "From", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Builder)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockSelectSQLBuilderMockRecorder) From(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockSelectSQLBuilder)(nil).From), arg0...)
}

// Select mocks base method.
func (m *MockSelectSQLBuilder) Select(arg0 ...string) sqlbuilder.Builder {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(sqlbuilder.Builder)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockSelectSQLBuilderMockRecorder) Select(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSelectSQLBuilder)(nil).Select), arg0...)
}

// SelectAccountBalancesSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectAccountBalancesSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAccountBalancesSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectAccountBalancesSQL indicates an expected call of SelectAccountBalancesSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectAccountBalancesSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAccountBalancesSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectAccountBalancesSQL), arg0)
}

// SelectApprovalsByTrIDSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectApprovalsByTrIDSQL(arg0 *types.ID) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectApprovalsByTrIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectApprovalsByTrIDSQL indicates an expected call of SelectApprovalsByTrIDSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectApprovalsByTrIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectApprovalsByTrIDSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectApprovalsByTrIDSQL), arg0)
}

// SelectApprovalsByTrIDsSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectApprovalsByTrIDsSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectApprovalsByTrIDsSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectApprovalsByTrIDsSQL indicates an expected call of SelectApprovalsByTrIDsSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectApprovalsByTrIDsSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectApprovalsByTrIDsSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectApprovalsByTrIDsSQL), arg0)
}

// SelectCurrentAccountBalanceByAccountNameSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectCurrentAccountBalanceByAccountNameSQL(arg0 *string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrentAccountBalanceByAccountNameSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectCurrentAccountBalanceByAccountNameSQL indicates an expected call of SelectCurrentAccountBalanceByAccountNameSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectCurrentAccountBalanceByAccountNameSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrentAccountBalanceByAccountNameSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectCurrentAccountBalanceByAccountNameSQL), arg0)
}

// SelectProfileIDsByAccount mocks base method.
func (m *MockSelectSQLBuilder) SelectProfileIDsByAccount(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProfileIDsByAccount", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectProfileIDsByAccount indicates an expected call of SelectProfileIDsByAccount.
func (mr *MockSelectSQLBuilderMockRecorder) SelectProfileIDsByAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProfileIDsByAccount", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectProfileIDsByAccount), arg0)
}

// SelectRuleInstanceSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectRuleInstanceSQL(arg0, arg1, arg2, arg3, arg4, arg5 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectRuleInstanceSQL", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectRuleInstanceSQL indicates an expected call of SelectRuleInstanceSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectRuleInstanceSQL(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectRuleInstanceSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectRuleInstanceSQL), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SelectTrItemsByTrIDSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTrItemsByTrIDSQL(arg0 *types.ID) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTrItemsByTrIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTrItemsByTrIDSQL indicates an expected call of SelectTrItemsByTrIDSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTrItemsByTrIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTrItemsByTrIDSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTrItemsByTrIDSQL), arg0)
}

// SelectTrItemsByTrIDsSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTrItemsByTrIDsSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTrItemsByTrIDsSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTrItemsByTrIDsSQL indicates an expected call of SelectTrItemsByTrIDsSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTrItemsByTrIDsSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTrItemsByTrIDsSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTrItemsByTrIDsSQL), arg0)
}

// SelectTransNotifsByAccountSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTransNotifsByAccountSQL(arg0 string, arg1 int) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTransNotifsByAccountSQL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTransNotifsByAccountSQL indicates an expected call of SelectTransNotifsByAccountSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTransNotifsByAccountSQL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTransNotifsByAccountSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTransNotifsByAccountSQL), arg0, arg1)
}

// SelectTransNotifsByIDsSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTransNotifsByIDsSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTransNotifsByIDsSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTransNotifsByIDsSQL indicates an expected call of SelectTransNotifsByIDsSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTransNotifsByIDsSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTransNotifsByIDsSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTransNotifsByIDsSQL), arg0)
}

// SelectTransactionByIDSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTransactionByIDSQL(arg0 *types.ID) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTransactionByIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTransactionByIDSQL indicates an expected call of SelectTransactionByIDSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTransactionByIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTransactionByIDSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTransactionByIDSQL), arg0)
}

// SelectTransactionsByIDsSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectTransactionsByIDsSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTransactionsByIDsSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectTransactionsByIDsSQL indicates an expected call of SelectTransactionsByIDsSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectTransactionsByIDsSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTransactionsByIDsSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectTransactionsByIDsSQL), arg0)
}

// SelectWebsocketByAccountsSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectWebsocketByAccountsSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWebsocketByAccountsSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectWebsocketByAccountsSQL indicates an expected call of SelectWebsocketByAccountsSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectWebsocketByAccountsSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWebsocketByAccountsSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectWebsocketByAccountsSQL), arg0)
}

// SelectWebsocketByConnectionIDSQL mocks base method.
func (m *MockSelectSQLBuilder) SelectWebsocketByConnectionIDSQL(arg0 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWebsocketByConnectionIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// SelectWebsocketByConnectionIDSQL indicates an expected call of SelectWebsocketByConnectionIDSQL.
func (mr *MockSelectSQLBuilderMockRecorder) SelectWebsocketByConnectionIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWebsocketByConnectionIDSQL", reflect.TypeOf((*MockSelectSQLBuilder)(nil).SelectWebsocketByConnectionIDSQL), arg0)
}

// MockDeleteSQLBuilder is a mock of DeleteSQLBuilder interface.
type MockDeleteSQLBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteSQLBuilderMockRecorder
}

// MockDeleteSQLBuilderMockRecorder is the mock recorder for MockDeleteSQLBuilder.
type MockDeleteSQLBuilderMockRecorder struct {
	mock *MockDeleteSQLBuilder
}

// NewMockDeleteSQLBuilder creates a new mock instance.
func NewMockDeleteSQLBuilder(ctrl *gomock.Controller) *MockDeleteSQLBuilder {
	mock := &MockDeleteSQLBuilder{ctrl: ctrl}
	mock.recorder = &MockDeleteSQLBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteSQLBuilder) EXPECT() *MockDeleteSQLBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDeleteSQLBuilder) Build() (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockDeleteSQLBuilderMockRecorder) Build() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).Build))
}

// BuildWithFlavor mocks base method.
func (m *MockDeleteSQLBuilder) BuildWithFlavor(arg0 sqlbuilder.Flavor, arg1 ...interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildWithFlavor", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// BuildWithFlavor indicates an expected call of BuildWithFlavor.
func (mr *MockDeleteSQLBuilderMockRecorder) BuildWithFlavor(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildWithFlavor", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).BuildWithFlavor), varargs...)
}

// DeleteAccountSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteAccountSQL(arg0 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccountSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteAccountSQL indicates an expected call of DeleteAccountSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteAccountSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccountSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteAccountSQL), arg0)
}

// DeleteOwnerAccountSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteOwnerAccountSQL(arg0 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwnerAccountSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteOwnerAccountSQL indicates an expected call of DeleteOwnerAccountSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteOwnerAccountSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwnerAccountSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteOwnerAccountSQL), arg0)
}

// DeleteTransNotificationsByIDSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteTransNotificationsByIDSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransNotificationsByIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteTransNotificationsByIDSQL indicates an expected call of DeleteTransNotificationsByIDSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteTransNotificationsByIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransNotificationsByIDSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteTransNotificationsByIDSQL), arg0)
}

// DeleteTransNotificationsByTransIDSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteTransNotificationsByTransIDSQL(arg0 types.ID) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransNotificationsByTransIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteTransNotificationsByTransIDSQL indicates an expected call of DeleteTransNotificationsByTransIDSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteTransNotificationsByTransIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransNotificationsByTransIDSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteTransNotificationsByTransIDSQL), arg0)
}

// DeleteWebsocketConnectionSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteWebsocketConnectionSQL(arg0 string) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebsocketConnectionSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteWebsocketConnectionSQL indicates an expected call of DeleteWebsocketConnectionSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteWebsocketConnectionSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebsocketConnectionSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteWebsocketConnectionSQL), arg0)
}

// DeleteWebsocketsByConnectionIDSQL mocks base method.
func (m *MockDeleteSQLBuilder) DeleteWebsocketsByConnectionIDSQL(arg0 []interface{}) (string, []interface{}) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebsocketsByConnectionIDSQL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	return ret0, ret1
}

// DeleteWebsocketsByConnectionIDSQL indicates an expected call of DeleteWebsocketsByConnectionIDSQL.
func (mr *MockDeleteSQLBuilderMockRecorder) DeleteWebsocketsByConnectionIDSQL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebsocketsByConnectionIDSQL", reflect.TypeOf((*MockDeleteSQLBuilder)(nil).DeleteWebsocketsByConnectionIDSQL), arg0)
}
