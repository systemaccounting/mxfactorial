import React from 'react'import cx from 'classnames'import { v4 } from 'uuid'import * as R from 'ramda'import { Field } from 'react-final-form'import { FieldArray } from 'react-final-form-arrays'import { OnChange } from 'react-final-form-listeners'import TransactionItem from './TransactionItem'import TransactionsList from './TransactionsList'import { InputField } from 'components/Form/Input'import LabelWithValue from 'components/LabelWithValue'import Button from 'components/Button'import { TypeSwitchField } from './TypeSwitch'import { recalculateRules } from './utils'class Transaction extends React.Component {  state = {    rules: [],    transactionHistory: [],    hideForm: false  }  transactionWrapperRef = React.createRef()  componentDidMount() {    this.getTransactions()  }  getTransactions = async () => {    const { fetchTransactions } = this.props    if (fetchTransactions) {      const transactionHistory = await fetchTransactions()      this.setState({ transactionHistory })    }  }  handleScroll = () => {    if (this.transactionWrapperRef.current) {      this.transactionWrapperRef.current.scrollIntoView({        behavior: 'smooth',        block: 'end'      })    }  }  handleRemoveTransaction = () => {    const { values } = this.props    if (values.items && values.items.length === 1) {      this.setState({ rules: [] })    }  }  handleInputBlur = () => {    if (this.props.valid) {      this.fetchRules()    }  }  fetchRules = () => {    const { values } = this.props    const { draftTransaction, transactions } = this.state    if (!this.props.fetchRules) {      return    }    this.setState({ isFetchingRules: true })    let promise = this.props.fetchRules(values.items)    this.fetchRulesRequest = promise    promise.then(({ data }) => {      // Resolve only the last request promise      if (promise === this.fetchRulesRequest) {        const rules = data.rules.filter(item => item.rule_instance_id)        rules.map(item => (item.uuid = v4())) // add key prop        this.setState({ rules, isFetchingRules: false })      }    })  }  requestTransactions = e => {    const { form } = this.props    const { rules } = this.state    const rulesItems = rules.map(item => {      // omit __typename to avoid GraphQL errors & client-side uuid      const { __typename, uuid, ...itemProps } = item      return { ...itemProps }    })    form.change('rules', rulesItems)    return this.props.handleSubmit(e)  }  onItemsChange = items => {    this.setState(prevState => ({      rules: recalculateRules(items, prevState.rules)    }))  }  get autor() {    return this.props.username  }  get debitor() {    const { values, username } = this.props    return values.type === 'credit' ? values.recipient : username  }  get creditor() {    const { values, username } = this.props    return values.type === 'debit' ? values.recipient : username  }  get rules() {    const { rules } = this.state    if (!rules) {      return null    }    return (      <div data-id="transaction-rules" style={{ marginTop: 20 }}>        {rules.map(transaction => (          <div key={transaction.uuid} data-id="rule-item">            <TransactionItem              data-uuid={transaction.uuid}              transaction={transaction}              onEdit={() => {}}              editable={false}            />          </div>        ))}      </div>    )  }  get total() {    const { values } = this.props    const { rules } = this.state    return R.pipe(      R.values,      R.map(value => {        if (!value) {          return 0        }        const qty = value.quantity || 1        return qty * value.price      }),      R.reject(isNaN),      R.sum    )([...values.items, ...rules])  }  render() {    const { values } = this.props    return (      <form        onSubmit={this.requestTransactions}        style={{ paddingBottom: 10 }}        ref={this.transactionWrapperRef}      >        <Field          name="recipient"          type="text"          placeholder="Recipient"          component={InputField}        />        <div className={cx({ updated: !this.state.isFetchingRules })}>          <LabelWithValue            name="total"            label="total"            value={this.total.toFixed(3)}          />        </div>        <Field name="type" component={TypeSwitchField} />        <div data-id="user-generated-items">          <FieldArray            name="items"            component={TransactionsList}            author={this.autor}            creditor={this.creditor}            debitor={this.debitor}            onAddTransaction={this.handleScroll}            onRemoveTransaction={this.handleRemoveTransaction}            onInputBlur={this.handleInputBlur}          />          <OnChange name="items">{this.onItemsChange}</OnChange>          <div data-id="draft-transaction">            <Button              data-id={values.type}              theme={values.type === 'credit' ? 'info' : 'success'}              type="submit"            >              {values.type === 'credit' ? 'Request' : 'Transact'}            </Button>          </div>        </div>        {this.rules}      </form>    )  }}Transaction.defaultProps = {  values: { type: 'credit', recipient: '', items: [{}] }}export default Transaction