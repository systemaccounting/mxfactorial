.github:
  codecov:
    flags:
      - unittest
      - integration
      - ui
client:
  runtime: v8
  min_code_cov: null
  type: app
  deploy: true
  local_dev: true
  env_var:
    set:
      CLIENT_URI:
        ssm: client/uri
        default: null
      CLIENT_PORT:
        ssm: null
        default: 10009
    get:
      - POOL_ID
      - CLIENT_ID
      - GRAPHQL_URI
      - CLIENT_PORT
  params:
    - ENABLE_API_AUTH
crates:
  env_var: null
  params: []
  httpclient:
    runtime: rust1.x
    min_code_cov: 55
    type: lib
    env_var: null
    params: []
  pg:
    runtime: rust1.x
    min_code_cov: 27
    type: lib
    params: []
    env_var:
      set: null
      get:
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
  types:
    runtime: rust1.x
    min_code_cov: 93
    type: lib
    env_var: null
    params: []
docker:
  env_var:
    set:
      DOCKER_USER:
        ssm: null
        default: mxfactorial
infrastructure:
  terraform:
    env_var:
      set:
        TFSTATE_EXT:
          ssm: null
          default: tfstate
        TFSTATE_ENV_SUFFIX:
          ssm: null
          default: env_infra
    env-id:
      prod:
        env_var:
          set:
            PROD_ENV_ID:
              ssm: null
              default: 0
    aws:
      environments:
        region:
          env_var:
            set:
              TFSTATE_APIGW_SUFFIX:
                ssm: null
                default: apigw_logging
      modules:
        env_var:
          set:
            LAMBDA_RUNTIME:
              ssm: null
              default: provided.al2023
        environment:
          env_var:
            set:
              PGDATABASE:
                ssm: database/sql/postgres/pgdatabase
                default: mxfactorial
              PGUSER:
                ssm: database/sql/postgres/pguser
                default: test
              PGPASSWORD:
                ssm: database/sql/postgres/pgpassword
                default: test
              PGHOST:
                ssm: database/sql/postgres/pghost
                default: localhost
              PGPORT:
                ssm: database/sql/postgres/pgport
                default: 5432
              CLIENT_ID:
                ssm: auth/cognito/client_id
                default: null
              POOL_ID:
                ssm: auth/cognito/pool_id
                default: null
              COGNITO_JWKS_URI:
                ssm: auth/cognito/jwks/uri
                default: null
              SECRET:
                ssm: auth/cognito/test_account/secret
                default: null
              ENABLE_API_AUTH:
                ssm: null
                default: false
              REGION:
                ssm: null
                default: us-east-1
              RDS_PREFIX:
                ssm: null
                default: mxfactorial
              SSM_VERSION:
                ssm: null
                default: v1
              GRAPHQL_URI:
                ssm: api/graphql/uri
                default: null # script sets as localhost:$PORT
              REQUEST_CREATE_URL:
                ssm: service/lambda/request_create/url
                default: null
              REQUEST_APPROVE_URL:
                ssm: service/lambda/request_approve/url
                default: null
              RULE_URL:
                ssm: service/lambda/rule/url
                default: null
              REQUEST_BY_ID_URL:
                ssm: service/lambda/request_by_id/url
                default: null
              REQUESTS_BY_ACCOUNT_URL:
                ssm: service/lambda/requests_by_account/url
                default: null
              TRANSACTION_BY_ID_URL:
                ssm: service/lambda/transaction_by_id/url
                default: null
              TRANSACTIONS_BY_ACCOUNT_URL:
                ssm: service/lambda/transactions_by_account/url
                default: null
              BALANCE_BY_ACCOUNT_URL:
                ssm: service/lambda/balance_by_account/url
                default: null
              RDS_INSTANCE_NAME_PREFIX:
                ssm: null
                default: mxfactorial
              READINESS_CHECK_PATH:
                ssm: service/lambda/readiness_check_path
                default: /healthz
              WEB_ADAPTER_LAYER_VERSION:
                ssm:
                default: 17
        project-storage:
          env_var:
            set:
              DDB_TABLE_NAME_PREFIX:
                ssm: null
                default: github-workflows
              DDB_TABLE_HASH_KEY:
                ssm: null
                default: GithubSha
              DDB_TABLE_TTL_ATTR:
                ssm: null
                default: ttl
              DYNAMODB_TTL_DAYS:
                ssm: null
                default: 1
              DDB_TABLE_PENDING_TESTS_ATTR:
                ssm: null
                default: PendingTests
              ARTIFACTS_BUCKET_PREFIX:
                ssm: null
                default: mxfactorial-artifacts
              CLIENT_ORIGIN_BUCKET_PREFIX:
                ssm: null
                default: mxfactorial-client
              TFSTATE_BUCKET_PREFIX:
                ssm: null
                default: mxfactorial-tfstate
migrations:
  type: lib
  params: []
  env_var:
    set:
      SQL_TYPE:
        ssm: null
        default: postgres
    get:
      - SQL_TYPE
      - PGHOST
      - PGPORT
      - PGUSER
      - PGPASSWORD
      - PGDATABASE
  dumps:
    env_var:
      set:
        TESTSEED_DUMP_PATH:
          ssm: null
          default: ./migrations/dumps/testseed.sql
  go-migrate:
    runtime: bash
    min_code_cov: null
    type: lib
    local_dev: false
    params:
      - AWS_REGION
    deploy: true
    build_src_path: null
    dependents:
    env_var:
      set: []
      get:
        - SQL_TYPE
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
  testseed:
    env_var:
      set:
        TEST_ACCOUNTS_FILE:
          ssm: null
          default: ./migrations/testseed/000001_accounts.up.sql
scripts:
  env_var:
    set:
      IAM_USER:
        ssm: null
        default: mxgitpod
      USER_POLICY_ARN:
        ssm: null
        default: arn:aws:iam::aws:policy/AdministratorAccess
      COMPOSE_DIR:
        ssm: null
        default: ./docker
      BUILD_DB:
        ssm: null
        default: true
      BUILD_CACHE:
        ssm: null
        default: true
      TEST_ACCOUNTS_MIGRATION_FILE:
        ssm: null
        default: ./migrations/testseed/000001_accounts.up.sql
      REQUIRED_PID_COUNT:
        ssm: null
        default: 10
      LOCAL_RESTART_LIMIT:
        ssm: null
        default: 3
      RESTART_SLEEP_SECONDS:
        ssm: null
        default: 5
      CUSTOM_IFS:
        ssm: null
        default: '|'
      SERVICE_PROCESSES:
        ssm: null
        default:
          - 'cargo-watch'
      CI_SERVICE_PROCESSES:
        ssm: null
        default:
          - 'go run '
          - 'target/debug'
      CLIENT_PROCESS:
        ssm: null
        default: 'bin/vite dev'
      ADDED_PROCESSES_TO_TERM:
        ssm: null
        default:
          - 'go-build'
          - 'npm run dev'
          - 'npm run build'
          - 'vite build'
          - 'tail -F'
services:
  env_var:
    set:
      BINARY_NAME:
        ssm: null
        default: bootstrap
      LAMBDA_INVOKE_LOG:
        ssm: null
        default: invoke.log
      RETURN_RECORD_LIMIT:
        ssm: null
        default: 20
  graphql:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params:
      - AWS_REGION
    deploy: true
    build_src_path: null
    dependents:
    env_var:
      set:
        GRAPHQL_PORT:
          ssm: null
          default: 10000
      get:
        - GRAPHQL_URI
        - RULE_URL
        - REQUEST_CREATE_URL
        - REQUEST_APPROVE_URL
        - REQUEST_BY_ID_URL
        - REQUESTS_BY_ACCOUNT_URL
        - TRANSACTIONS_BY_ACCOUNT_URL
        - TRANSACTION_BY_ID_URL
        - BALANCE_BY_ACCOUNT_URL
        - READINESS_CHECK_PATH
        - GRAPHQL_PORT
  request-create:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params:
      - AWS_REGION
    deploy: true
    build_src_path: null
    dependents:
      - request-approve
    env_var:
      set:
        REQUEST_CREATE_PORT:
          ssm: null
          default: 10002
      get:
        - READINESS_CHECK_PATH
        - REQUEST_CREATE_URL
        - RULE_URL
        - REQUEST_CREATE_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
  request-approve:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params:
      - AWS_REGION
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        REQUEST_APPROVE_PORT:
          ssm: null
          default: 10003
      get:
        - READINESS_CHECK_PATH
        - REQUEST_APPROVE_URL
        - REQUEST_APPROVE_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
  rule:
    runtime: rust1.x
    min_code_cov: 49
    type: app
    local_dev: true
    params:
      - AWS_REGION
    deploy: true
    build_src_path: null
    dependents:
      - request-create
    env_var:
      set:
        RULE_PORT:
          ssm: null
          default: 10001
        HOSTNAME_OR_IP:
          ssm: null
          default: localhost
        RUST_LOG:
          ssm: null
          default: info
        RUST_BACKTRACE:
          ssm: null
          default: 1
      get:
        - PGDATABASE
        - PGUSER
        - PGPASSWORD
        - PGHOST
        - PGPORT
        - CLIENT_ID
        - POOL_ID
        - GRAPHQL_URI
        - RULE_URL
        - READINESS_CHECK_PATH
        - RULE_PORT
        - HOSTNAME_OR_IP
        - RUST_LOG
        - RUST_BACKTRACE
  request-by-id:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        REQUEST_BY_ID_PORT:
          ssm: null
          default: 10005
      get:
        - REQUEST_BY_ID_URL
        - REQUEST_BY_ID_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
        - READINESS_CHECK_PATH
  requests-by-account:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        REQUESTS_BY_ACCOUNT_PORT:
          ssm: null
          default: 10006
      get:
        - REQUESTS_BY_ACCOUNT_URL
        - REQUESTS_BY_ACCOUNT_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
        - READINESS_CHECK_PATH
        - RETURN_RECORD_LIMIT
  transaction-by-id:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        TRANSACTION_BY_ID_PORT:
          ssm: null
          default: 10007
      get:
        - TRANSACTION_BY_ID_URL
        - TRANSACTION_BY_ID_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
        - READINESS_CHECK_PATH
  transactions-by-account:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        TRANSACTIONS_BY_ACCOUNT_PORT:
          ssm: null
          default: 10008
      get:
        - TRANSACTIONS_BY_ACCOUNT_URL
        - TRANSACTIONS_BY_ACCOUNT_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
        - READINESS_CHECK_PATH
        - RETURN_RECORD_LIMIT
  balance-by-account:
    runtime: rust1.x
    min_code_cov: null
    type: app
    local_dev: true
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      set:
        BALANCE_BY_ACCOUNT_PORT:
          ssm: null
          default: 10004
      get:
        - BALANCE_BY_ACCOUNT_URL
        - BALANCE_BY_ACCOUNT_PORT
        - PGHOST
        - PGPORT
        - PGUSER
        - PGPASSWORD
        - PGDATABASE
        - READINESS_CHECK_PATH
  auto-confirm:
    runtime: rust1.x
    min_code_cov: null
    type: app
    params: []
    deploy: true
    build_src_path: null
    dependents: []
    env_var:
      get: # used by make targets
        - POOL_ID
        - CLIENT_ID
tests:
  runtime: rust1.x
  type: tool
  deploy: false
  env_var:
    set:
      AWS_LAMBDA_FUNCTION_NAME:
        ssm: null
        default: null # switched to non null by scripts/create-env-file.sh when testing lambdas
    get:
      - GRAPHQL_URI
      - RULE_URL
      - REQUEST_CREATE_URL
      - REQUEST_APPROVE_URL
      - REQUEST_BY_ID_URL
      - REQUESTS_BY_ACCOUNT_URL
      - TRANSACTIONS_BY_ACCOUNT_URL
      - TRANSACTION_BY_ID_URL
      - BALANCE_BY_ACCOUNT_URL
      - AWS_LAMBDA_FUNCTION_NAME # used when testing cloud envs
  params: []
env_var:
  set:
    ENV_FILE_NAME:
      ssm: null
      default: .env
    LOCAL_ADDRESS:
      ssm: null
      default: localhost
    NOHUP_LOG:
      ssm: null
      default: nohup.out
  get:
    - CLIENT_URI
    - GRAPHQL_URI
params: []
# .tools as list to support sequenced install scripting
.tools:
  - name: docker
    os:
      osx:
        install: 'if ! command docker -v >/dev/null 2>&1; then echo -e "\033[1;33minstall docker from https://docs.docker.com/desktop/install/mac-install/ before continuing\033[0m"; exit 1; fi'
  - name: brew
    os:
      osx:
        install: '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
  - name: node
    os:
      osx:
        install: 'brew install node'
  - name: awscli
    os:
      osx:
        install: 'brew install awscli'
  - name: tfswitch
    os:
      osx:
        install: 'brew install warrensbox/tap/tfswitch'
  - name: tfswitch
    os:
      osx:
        install: 'brew install warrensbox/tap/tfswitch'
  - name: libpq
    os:
      osx:
        install: 'brew install libpq && brew link --force libpq'
  - name: golang-migrate
    os:
      osx:
        install: 'brew install golang-migrate'
  - name: yq
    os:
      osx:
        install: 'brew install yq'
  - name: eslint
    os:
      osx:
        install: 'npm install -g eslint'
  - name: rust
    os:
      osx:
        install: "curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y"
  - name: llvm-tools-preview
    os:
      osx:
        install: 'rustup component add llvm-tools-preview --toolchain stable-x86_64-apple-darwin'
  - name: cross
    os:
      osx:
        install: 'cargo install cross --git https://github.com/cross-rs/cross'
  - name: cargo-watch
    os:
      osx:
        install: 'cargo install cargo-watch'
  - name: cargo-llvm-cov
    os:
      osx:
        install: 'cargo install cargo-llvm-cov'