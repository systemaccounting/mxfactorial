{
    "artifacts_bucket_name_prefix": "mxfactorial-artifacts",
    "client_origin_bucket_name_prefix": "mxfactorial-client",
    "tfstate_bucket_name_prefix": "mxfactorial-tfstate",
    "apps": {
        "graphql": {
            "runtime": "go1.x",
            "path": "services/graphql",
            "secrets": [
                "GRAPHQL_URI",
                "RULES_URL",
                "REQUEST_CREATE_URL",
                "REQUEST_APPROVE_URL",
                "REQUEST_BY_ID_URL",
                "REQUESTS_BY_ACCOUNT_URL",
                "TRANSACTIONS_BY_ACCOUNT_URL",
                "TRANSACTION_BY_ID_URL",
                "BALANCE_BY_ACCOUNT_URL"
            ],
            "params": [
                "AWS_REGION",
                "LOCAL_ENV"
            ],
            "deploy": true,
            "lambda_name_prefix": "graphql",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": ".",
            "dependents": [
                "request-create",
                "request-approve",
                "rules",
                "request-by-id",
                "requests-by-account",
                "transaction-by-id",
                "transactions-by-account",
                "balance-by-account",
                "client"
            ]
        },
        "request-create": {
            "runtime": "go1.x",
            "path": "services/request-create",
            "secrets": [
                "NOTIFY_TOPIC_ARN",
                "READINESS_CHECK_PATH",
                "REQUEST_CREATE_URL",
                "RULES_URL"
            ],
            "params": [
                "AWS_REGION",
                "ENABLE_NOTIFICATIONS"
            ],
            "deploy": true,
            "lambda_name_prefix": "request-create",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": [
                "request-approve"
            ]
        },
        "request-approve": {
            "runtime": "go1.x",
            "path": "services/request-approve",
            "secrets": [
                "NOTIFY_TOPIC_ARN",
                "READINESS_CHECK_PATH",
                "REQUEST_APPROVE_URL"
            ],
            "params": [
                "AWS_REGION",
                "ENABLE_NOTIFICATIONS"
            ],
            "deploy": true,
            "lambda_name_prefix": "request-approve",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "rules": {
            "runtime": "nodejs18.x",
            "path": "services/rules",
            "secrets": [
                "PGDATABASE",
                "PGUSER",
                "PGPASSWORD",
                "PGHOST",
                "PGPORT",
                "CLIENT_ID",
                "POOL_ID",
                "GRAPHQL_URI",
                "RULES_URL"
            ],
            "params": [
                "AWS_REGION"
            ],
            "deploy": true,
            "lambda_name_prefix": "rules",
            "lambda_invoke_log": "invoke.log",
            "executable_name": null,
            "build_src_path": null,
            "dependents": [
                "request-create"
            ]
        },
        "request-by-id": {
            "runtime": "go1.x",
            "path": "services/request-by-id",
            "secrets": [
                "REQUEST_BY_ID_URL"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "request-by-id",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "requests-by-account": {
            "runtime": "go1.x",
            "path": "services/requests-by-account",
            "secrets": [
                "REQUESTS_BY_ACCOUNT_URL"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "requests-by-account",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "transaction-by-id": {
            "runtime": "go1.x",
            "path": "services/transaction-by-id",
            "secrets": [
                "TRANSACTION_BY_ID_URL"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "transaction-by-id",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "transactions-by-account": {
            "runtime": "go1.x",
            "path": "services/transactions-by-account",
            "secrets": [
                "TRANSACTIONS_BY_ACCOUNT_URL"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "transactions-by-account",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "notifications-send": {
            "runtime": "go1.x",
            "path": "services/notifications-send",
            "secrets": [
                "NOTIFY_TOPIC_ARN",
                "APIGW_CONNECTIONS_URI"
            ],
            "params": [
                "AWS_REGION"
            ],
            "deploy": true,
            "lambda_name_prefix": "notifications-send",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "notifications-get": {
            "runtime": "go1.x",
            "path": "services/notifications-get",
            "secrets": [
                "COGNITO_JWKS_URI",
                "NOTIFICATIONS_RETURN_LIMIT",
                "CLIENT_ID",
                "SECRET",
                "WEBSOCKET_CLIENT_URI"
            ],
            "params": [
                "AWS_REGION",
                "ENABLE_API_AUTH"
            ],
            "deploy": true,
            "lambda_name_prefix": "notifications-get",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "notifications-clear": {
            "runtime": "go1.x",
            "path": "services/notifications-clear",
            "secrets": [
                "COGNITO_JWKS_URI",
                "CLIENT_ID",
                "WEBSOCKET_CLIENT_URI"
            ],
            "params": [
                "AWS_REGION",
                "ENABLE_API_AUTH"
            ],
            "deploy": true,
            "lambda_name_prefix": "notifications-clear",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "balance-by-account": {
            "runtime": "go1.x",
            "path": "services/balance-by-account",
            "secrets": [
                "BALANCE_BY_ACCOUNT_URL"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "balance-by-account",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "wss-connect": {
            "runtime": "go1.x",
            "path": "services/wss-connect",
            "secrets": [],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "wss-connect",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "auto-confirm": {
            "runtime": "go1.x",
            "path": "services/auto-confirm",
            "secrets": [
                "POOL_ID",
                "CLIENT_ID"
            ],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "auto-confirm",
            "lambda_invoke_log": "invoke.log",
            "executable_name": "index.handler",
            "build_src_path": "cmd",
            "dependents": []
        },
        "client": {
            "runtime": "v8",
            "path": "client",
            "secrets": [
                "POOL_ID",
                "CLIENT_ID",
                "GRAPHQL_URI"
            ],
            "params": [
                "ENABLE_AUTH"
            ],
            "deploy": true,
            "dependents": []
        },
        "go-migrate": {
            "runtime": "provided",
            "path": "migrations/go-migrate",
            "secrets": [],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "go-migrate",
            "lambda_invoke_log": null,
            "executable_name": "index.sh",
            "build_src_path": null,
            "dependents": [],
            "terraform": {
                "aws": {
                    "layer_name_suffix": "go-migrate-provided-deps"
                }
            },
            "docker": {
                "image": {
                    "user": "mxfactorial",
                    "repository": "go-migrate-lambda-layer",
                    "tag_version": "v1"
                }
            }
        },
        "db-reset": {
            "runtime": "provided",
            "path": "migrations/db-reset",
            "secrets": [],
            "params": [],
            "deploy": true,
            "lambda_name_prefix": "db-reset",
            "lambda_invoke_log": null,
            "executable_name": "index.sh",
            "build_src_path": null,
            "dependents": []
        },
        "delete-faker-accounts": {
            "runtime": "nodejs14.x",
            "path": "services/internal-tools/delete-faker-accounts",
            "secrets": [],
            "params": [],
            "deploy": false,
            "lambda_name_prefix": null,
            "lambda_invoke_log": null,
            "executable_name": null,
            "build_src_path": null,
            "dependents": []
        }
    },
    "pkgs": {
        "lambda": {
            "runtime": "go1.x",
            "path": "services/gopkg/aws/lambda",
            "dependents": [],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/aws/lambda": [
                    "IAWSLambda",
                    "ILambdaService"
                ]
            }
        },
        "service": {
            "runtime": "go1.x",
            "path": "services/gopkg/service",
            "dependents": [
                "request-create",
                "request-approve",
                "request-by-id",
                "requests-by-account",
                "transaction-by-id",
                "transactions-by-account",
                "notifications-send",
                "notifications-get",
                "notifications-clear",
                "balance-by-account",
                "wss-connect",
                "auto-confirm"
            ],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/service": [
                    "IAccountService",
                    "IApproveService",
                    "IBalanceService",
                    "ICreateAccountService",
                    "ITransactionNotificationService",
                    "IProfileService",
                    "IRuleInstanceService",
                    "ITransactionService",
                    "IWebsocketService"
                ]
            }
        },
        "postgres": {
            "runtime": "go1.x",
            "path": "services/gopkg/postgres",
            "dependents": [
                "service"
            ],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/postgres": [
                    "Connector",
                    "SQLDB"
                ],
                "github.com/jackc/pgx/v4": [
                    "Rows",
                    "Row"
                ]
            }
        },
        "sqls": {
            "runtime": "go1.x",
            "path": "services/gopkg/sqls",
            "dependents": [
                "postgres"
            ]
        },
        "test": {
            "runtime": "nodejs18.x",
            "path": "test",
            "dependents": [],
            "secrets": [
                "GRAPHQL_URI",
                "RULES_URL",
                "REQUEST_CREATE_URL",
                "REQUEST_APPROVE_URL",
                "REQUEST_BY_ID_URL",
                "REQUESTS_BY_ACCOUNT_URL",
                "TRANSACTIONS_BY_ACCOUNT_URL",
                "TRANSACTION_BY_ID_URL",
                "BALANCE_BY_ACCOUNT_URL"
            ],
            "params": []
        },
        "testdata": {
            "runtime": "go1.x",
            "path": "services/gopkg/testdata",
            "dependents": []
        },
        "print": {
            "runtime": "go1.x",
            "path": "services/gopkg/print",
            "dependents": [],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/print": [
                    "Marshaler"
                ]
            }
        },
        "types": {
            "runtime": "go1.x",
            "path": "services/gopkg/types",
            "dependents": [
                "testdata",
                "postgres",
                "service",
                "tools",
                "sqls",
                "lambdasdk",
                "request-create",
                "request-approve",
                "request-by-id",
                "requests-by-account",
                "transaction-by-id",
                "transactions-by-account",
                "notifications-send",
                "notifications-get",
                "notifications-clear",
                "balance-by-account",
                "wss-connect",
                "auto-confirm"
            ],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/types": [
                    "TrItemListHelper",
                    "IScanRow",
                    "IScanRows",
                    "IEncodingJSON"
                ]
            }
        },
        "sns": {
            "runtime": "go1.x",
            "path": "services/gopkg/aws/sns",
            "dependents": [
                "notifications-send"
            ],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/aws/sns": [
                    "ISNS"
                ]
            }
        },
        "apigwma": {
            "runtime": "go1.x",
            "path": "services/gopkg/aws/apigwma",
            "dependents": [],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/aws/apigwma": [
                    "IAWSAPIGWMA"
                ]
            }
        },
        "cognitoidp": {
            "runtime": "go1.x",
            "path": "services/gopkg/aws/cognitoidp",
            "dependents": [],
            "mocked_interfaces": {
                "github.com/systemaccounting/mxfactorial/services/gopkg/aws/cognitoidp": [
                    "IJwtDeps",
                    "IGetClaimedKeyID",
                    "IIdpDeps",
                    "IJwToken"
                ]
            }
        }
    },
    "path": ".",
    "secrets": [
        "CLIENT_URI",
        "GRAPHQL_URI"
    ],
    "github_workflows": {
        "dynamodb_table": {
            "name_prefix": "github-workflows",
            "hash_key": "GithubSha",
            "ttl_attribute": "ttl",
            "ttl_days": "1",
            "pending_tests_attribute": "PendingTests"
        },
        "codecov": {
            "flags": [
                "unittest",
                "integration",
                "ui"
            ]
        }
    },
    "params": [],
    "gomock": {
        "package_name_prefix": "mock",
        "file_name_suffix": "mock.go"
    },
    "cognito": {
        "test_accounts_file": "./migrations/testseed/000001_accounts.up.sql"
    },
    "enable_api_auth": false,
    "enable_notifications": false,
    "ssm_version": "v1",
    "env_var": {
        "GRAPHQL_URI": {
            "ssm": "api/graphql/uri",
            "docker": "http://localhost:8080"
        },
        "NOTIFY_TOPIC_ARN": {
            "ssm": "notifications/sns/topic/arn",
            "docker": null
        },
        "PGDATABASE": {
            "ssm": "database/sql/postgres/pgdatabase",
            "docker": "mxfactorial"
        },
        "PGUSER": {
            "ssm": "database/sql/postgres/pguser",
            "docker": "test"
        },
        "PGPASSWORD": {
            "ssm": "database/sql/postgres/pgpassword",
            "docker": "test"
        },
        "PGHOST": {
            "ssm": "database/sql/postgres/pghost",
            "docker": "localhost"
        },
        "PGPORT": {
            "ssm": "database/sql/postgres/pgport",
            "docker": 5432
        },
        "TESTSEED_DUMP_PATH": {
            "ssm": null,
            "docker": "./migrations/dumps/testseed.sql"
        },
        "CLIENT_ID": {
            "ssm": "auth/cognito/client_id",
            "docker": null
        },
        "POOL_ID": {
            "ssm": "auth/cognito/pool_id",
            "docker": null
        },
        "POOL_NAME": {
            "ssm": "auth/cognito/pool_name",
            "docker": null
        },
        "APIGW_CONNECTIONS_URI": {
            "ssm": "api/websocket/connections/uri",
            "docker": null
        },
        "COGNITO_JWKS_URI": {
            "ssm": "auth/cognito/jwks/uri",
            "docker": null
        },
        "NOTIFICATIONS_RETURN_LIMIT": {
            "ssm": "notifications/return_limit",
            "docker": null
        },
        "SECRET": {
            "ssm": "auth/cognito/test_account/secret",
            "docker": null
        },
        "WEBSOCKET_CLIENT_URI": {
            "ssm": "api/websocket/client/uri",
            "docker": null
        },
        "DB_RESET_PASSPHRASE": {
            "ssm": "tool/lambda/db_reset/passphrase",
            "docker": null
        },
        "CLIENT_URI": {
            "ssm": "client/uri",
            "docker": "http://localhost:8090"
        },
        "READINESS_CHECK_PATH": {
            "ssm": "service/lambda/readiness_check_path",
            "docker": null
        },
        "RULES_URL": {
            "ssm": "service/lambda/rules/url",
            "docker": "http://localhost:8081"
        },
        "REQUEST_CREATE_URL": {
            "ssm": "service/lambda/request_create/url",
            "docker": "http://localhost:8082"
        },
        "REQUEST_APPROVE_URL": {
            "ssm": "service/lambda/request_approve/url",
            "docker": "http://localhost:8083"
        },
        "REQUEST_BY_ID_URL": {
            "ssm": "service/lambda/request_by_id/url",
            "docker": "http://localhost:8087"
        },
        "REQUESTS_BY_ACCOUNT_URL": {
            "ssm": "service/lambda/requests_by_account/url",
            "docker": "http://localhost:8086"
        },
        "TRANSACTIONS_BY_ACCOUNT_URL": {
            "ssm": "service/lambda/transactions_by_account/url",
            "docker": "http://localhost:8088"
        },
        "TRANSACTION_BY_ID_URL": {
            "ssm": "service/lambda/transaction_by_id/url",
            "docker": "http://localhost:8089"
        },
        "BALANCE_BY_ACCOUNT_URL": {
            "ssm": "service/lambda/balance_by_account/url",
            "docker": "http://localhost:8085"
        }
    },
    "region": "us-east-1",
    "gitpod": {
        "iam_user": "mxgitpod",
        "user_policy_arn": "arn:aws:iam::aws:policy/AdministratorAccess"
    },
    "terraform": {
        "tfstate": {
            "file_extension": "tfstate",
            "file_name_suffix": {
                "apigw_logging": "apigw_logging",
                "env_infra": "env_infra"
            }
        },
        "prod": {
            "env_id": 0
        },
        "aws": {
            "build_db": true,
            "build_cache": true,
            "rds": {
                "instance_name_prefix": "mxfactorial"
            }
        }
    },
    "docker": {
        "compose": {
            "dir": "./docker"
        }
    }
}